DK: swap assignment/lab for queues assignment

--- RAE NOTES

Focus more on correctness:
 - no repetitive code (or a descriptive comment)
 - smaller scopes are better
 - comments on every method, incl. preconditions and postconditions and arg descriptions
 - no magic constants
 - crisp coding: spelling is correct, indentation is clean
 - style as deduction, not part of main points
 - no no-ops


-----------------------------------
FOR NEXT TIME:

- Less on OO. Maybe no inheritance, just interfaces. No hard casts.

- Perhaps add priority queues. Their absence seems like an oversight.

- Compare Assignment 4 to previous assignments. Many students liked
  phrasing of Assignment 4 more. By a lot.

- Add time estimates to other assignments, too.

- Remove exceptions from Assignment 2 (and subsequent ones)

- Figure out what to do about JUnit. Either use it more or not at all. (Use it more!)

- Clarify Big-O in #5 of assignment 8

- Clarify requirements in assignment 5 (see rubric)

- Clarify that students can take code from elsewhere in #8

- Check BMCHashSet implementation: the put method might duplicate entries if
  the key is already there

- Also, the BMCHSIterator throws NullPointerException if next() is called on an
  empty HashSet

---

- Lab sessions felt like more description would be helpful

- Labs sometimes felt split between lab and assignment

- Go over solutions in class

- posting lab solutions was helpful (perhaps a week later)

- problems before class to go over in class

- partners in lab are good (dealing the cards)

- perhaps (different opinions!) ask who wants cards

- JUnit was too much or too little.
  Why use JUnit instead of debugger?

------------
DIFFICULTY

11a "not part of any of these classes" confusing

memory diagrams: specific shape is confusing

disconnection between class and assignments
 - interacting with code only in homeworks

trouble following logic
 - could talk more about pseudocode in class

coding style is different
 - all in the console
 - classes are abstract

assignment 1 was easier because there weren't classes

examples aren't applicable enough to the assignments

objective of assts 2 and 3 is more abstract

many layers of difficulty in assignments

reading is hard

assignments don't teach "writing" code

less Eclipse; more work on paper

MORE WORKSHEETS!

challenge exercises
